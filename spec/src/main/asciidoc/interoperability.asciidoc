//
// Copyright (c) 2016-2017 Eclipse Microprofile Contributors:
// Red Hat, IBM
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

## Recommendations for Interoperability

The decision about using JWT as token format also depends on the agreement between both identity providers and service providers.
That means identity providers - responsible for issuing tokens - should be able to issue tokens using the JWT format in a
way that service providers can understand in order to introspect the token and gather information about a subject.

1. An authentication token, and
2. An authorization token that contains J2EE role based authorization directly or indirectly granted with group
3. Can be mapped to IdentityStore in JSR375,
4. Can support standard claims in https://www.iana.org/assignments/jwt/jwt.xhtml

To meet those requirements, we can introduce 3 new claims to define the JWT:

* "unique_username" or "upn": Human readable claim that uniquely identify subject or user principal of token.
* "groups": The subject's group membership.
* "roles": The application roles that the subject has been granted directly and indirectly through groups claim.

The "unique_username" or "upn" is user principal, and is the caller principal in IdentityStore. If this claim is ommitted, the "sub" itself is used as caller principal.

The "groups" contains group membership of caller principal in IdentityStore.
the "roles" contains granted application roles through "groups" or "unique_username" claims.

The recommended minimum JWT would be
```json
{
     "typ": "JWT",
    "alg": "RS256",
    "kid": "abc-1234567890"
}
{
       "iss": "https://server.example.com",
       "aud": "s6BhdRkqt3",
       "exp": 1311281970,
       "iat": 1311280970,
       "sub": "24400320",
        "unique_username <or "upn">": "jdoe@server.example.com",
        "groups": ["red-group", "green-group", "admin-group"],
       "roles": ["auditor", "administrator"]
}
```

The JWT can contains all other optional and standard claims:
```json
{
       "iss": "https://server.example.com",
       "aud": "s6BhdRkqt3",
       "exp": 1311281970,
       "iat": 1311280970,
       "sub": "24400320",

        "unique_username <or "upn">": "jdoe@server.example.com",
        "groups: ["red-group", "green-group", "admin-group"],
    "roles": ["auditor", "administrator"],

       "jti": "a-123",
       "auth_time": 1311280969,
        "preferred_username": "jdoe",
        "acr": "phr",
        "nbf":  1311288970
        ....... <and all other claims defined by JWT spec and OIDC spec>
```

An extended form of authorization on a per service basis
```json
	{
   		"iss": "https://server.example.com",
   		"sub": "24400320",
     "preferred_username": "jdoe",
   		"aud": "s6BhdRkqt3",
   		"exp": 1311281970,
   		"iat": 1311280970,
   		"auth_time": 1311280969,
      "roles": ["role-in-realm", "user", "manager"],
      "groups": [],
      "resource_access": {
          "my-service": {
            "groups": ["group1", ],
            "roles": [
              "role-in-my-service"
            ]
          },
          "service-B": {
            "roles": [
              "role-in-B"
            ]
          },
          "service-C": {
            "groups": [
              "groupC", "web-tier"
            ]
          }
        },
      }
  }
```

The "roles" and "groups" claim can be used to define which roles/groups were granted to a subject at the realm or security domain level.
On the other hand, the "resource_access" claim allows one to define a different set of roles/groups which are associated
with a specific resource server or service.

[NOTE]
It has been suggested that there should be a scope claim.
Do we want to bring OAuth2 concepts to the proposal? I think roles should cover most use cases.

## Mapping Tokens to Container APIs

The requirements of how a JWT should be exposed via the various container APIs is discussed in this section.

### Set<String> IdentityStore#getCallerGroups(CredentialValidationResult)
A JWT can contains both "roles" and "groups", or just "groups" or "roles". If JWT only contains "roles", the set
of names returned by this method is the set from the array of role names. If a "groups" claim exists in the JWT,
the set of names returned by this method is the set from the array of group names.

In the case of the existence of a "resource_access" claim, the role and group names must be prefixed with the name
of the

### SecurityContext#getCallerPrincipal()/HttpServletRequest#getUserPrincipal() Requirements
The CallerPrincipal returned from these methods should be an instance of org.eclipse.microprofile.jwt.JWTCallerPrincipal.

### @Inject Principal Requirements
The injected CallerPrincipal should be an instance of org.eclipse.microprofile.jwt.JWTCallerPrincipal.

### isCallerInRole(String)/isUserInRole(String) Requirements
TODO

### SecurityContext.isCallerInRole(String)/SecurityContext.getAllCallerRoles() Requirements
TODO

### @RolesAllowed ?
TODO
